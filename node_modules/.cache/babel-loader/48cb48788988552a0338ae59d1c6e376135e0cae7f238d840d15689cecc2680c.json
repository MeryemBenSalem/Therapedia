{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youss\\\\Downloads\\\\Therapedia\\\\Therapedia\\\\src\\\\components\\\\Question.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Comment from './Comment';\nimport './Question.css';\nimport AddBoxRoundedIcon from '@mui/icons-material/AddBoxRounded';\nimport { Button } from '@mui/material';\nimport ArrowUpwardRoundedIcon from '@mui/icons-material/ArrowUpwardRounded';\nimport ArrowDownwardRoundedIcon from '@mui/icons-material/ArrowDownwardRounded';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = ({\n  question,\n  onVote,\n  onCommentVote\n}) => {\n  _s();\n  const [comments, setComments] = useState(question.comments || []);\n  const handleAddComment = async () => {\n    // Assuming newComment is a state variable\n    if (!newComment.trim()) return;\n    const updatedComments = [...comments, {\n      text: newComment,\n      upvotes: 0,\n      downvotes: 0\n    }];\n    setComments(updatedComments);\n    setNewComment('');\n\n    // Call the backend to add the comment\n    try {\n      const response = await fetch('http://localhost:8080/api/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: newComment\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add comment');\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  const handleUpvoteComment = async commentId => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}/upvote`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upvote comment');\n      }\n      // Refresh comments after upvoting\n      setComments(prevComments => prevComments.map(comment => comment.id === commentId ? {\n        ...comment,\n        upvotes: comment.upvotes + 1\n      } : comment));\n    } catch (error) {\n      console.error('Error upvoting comment:', error);\n    }\n  };\n  const handleDownvoteComment = async commentId => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments/${commentId}/downvote`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to downvote comment');\n      }\n      // Refresh comments after downvoting\n      setComments(prevComments => prevComments.map(comment => comment.id === commentId ? {\n        ...comment,\n        downvotes: comment.downvotes + 1\n      } : comment));\n    } catch (error) {\n      console.error('Error downvoting comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-content\",\n      children: question.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-container\",\n      children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment,\n        onUpvote: () => handleUpvoteComment(comment.id),\n        onDownvote: () => handleDownvoteComment(comment.id)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-box1\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        className: \"comment-input\",\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        startIcon: /*#__PURE__*/_jsxDEV(AddBoxRoundedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 36\n        }, this),\n        onClick: handleAddComment,\n        className: \"comment-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(Question, \"GXgiHEnji35h4ZhzP3YlgPwafko=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useState","Comment","AddBoxRoundedIcon","Button","ArrowUpwardRoundedIcon","ArrowDownwardRoundedIcon","jsxDEV","_jsxDEV","Question","question","onVote","onCommentVote","_s","comments","setComments","handleAddComment","newComment","trim","updatedComments","text","upvotes","downvotes","setNewComment","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","handleUpvoteComment","commentId","prevComments","map","comment","id","handleDownvoteComment","className","children","content","fileName","_jsxFileName","lineNumber","columnNumber","index","onUpvote","onDownvote","type","value","onChange","e","target","placeholder","startIcon","onClick","_c","$RefreshReg$"],"sources":["C:/Users/youss/Downloads/Therapedia/Therapedia/src/components/Question.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Comment from './Comment';\r\nimport './Question.css';\r\nimport AddBoxRoundedIcon from '@mui/icons-material/AddBoxRounded';\r\nimport { Button } from '@mui/material';\r\nimport ArrowUpwardRoundedIcon from '@mui/icons-material/ArrowUpwardRounded';\r\nimport ArrowDownwardRoundedIcon from '@mui/icons-material/ArrowDownwardRounded';\r\n\r\nconst Question = ({ question, onVote, onCommentVote }) => {\r\n    const [comments, setComments] = useState(question.comments || []);\r\n\r\n    const handleAddComment = async () => {\r\n        // Assuming newComment is a state variable\r\n        if (!newComment.trim()) return;\r\n        const updatedComments = [...comments, { text: newComment, upvotes: 0, downvotes: 0 }];\r\n        setComments(updatedComments);\r\n        setNewComment('');\r\n\r\n        // Call the backend to add the comment\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/comments', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ text: newComment }),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add comment');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error);\r\n        }\r\n    };\r\n\r\n    const handleUpvoteComment = async (commentId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/comments/${commentId}/upvote`, {\r\n                method: 'PUT',\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to upvote comment');\r\n            }\r\n            // Refresh comments after upvoting\r\n            setComments((prevComments) =>\r\n                prevComments.map((comment) =>\r\n                    comment.id === commentId ? { ...comment, upvotes: comment.upvotes + 1 } : comment\r\n                )\r\n            );\r\n        } catch (error) {\r\n            console.error('Error upvoting comment:', error);\r\n        }\r\n    };\r\n\r\n    const handleDownvoteComment = async (commentId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/comments/${commentId}/downvote`, {\r\n                method: 'PUT',\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to downvote comment');\r\n            }\r\n            // Refresh comments after downvoting\r\n            setComments((prevComments) =>\r\n                prevComments.map((comment) =>\r\n                    comment.id === commentId ? { ...comment, downvotes: comment.downvotes + 1 } : comment\r\n                )\r\n            );\r\n        } catch (error) {\r\n            console.error('Error downvoting comment:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"questions-list\">\r\n            {/* Question content */}\r\n            <div className=\"question-content\">{question.content}</div>\r\n\r\n            {/* Comments section */}\r\n            <div className=\"comment-container\">\r\n                {comments.map((comment, index) => (\r\n                    <Comment\r\n                        key={index}\r\n                        comment={comment}\r\n                        onUpvote={() => handleUpvoteComment(comment.id)}\r\n                        onDownvote={() => handleDownvoteComment(comment.id)}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {/* Add comment section */}\r\n            <div className=\"comment-box1\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    className=\"comment-input\"\r\n                    placeholder=\"Add a comment...\"\r\n                />\r\n                <Button startIcon={<AddBoxRoundedIcon />} onClick={handleAddComment} className=\"comment-button\"></Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}