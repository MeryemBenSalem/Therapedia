{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youss\\\\Downloads\\\\Therapedia\\\\Therapedia\\\\src\\\\components\\\\Question.js\",\n  _s = $RefreshSig$();\n// Question.js\nimport React, { useState } from 'react';\nimport Comment from './Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = ({\n  question\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const handleAddComment = () => {\n    if (!newComment.trim()) return;\n    setComments([...comments, newComment]);\n    setNewComment('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: [\"Upvote (\", question.upvotes, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: [\"Downvote (\", question.downvotes, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), question.comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n      comment: comment\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_s(Question, \"UfD/h9Ak6ftDPX32D4x5hoYrOFM=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useState","Comment","jsxDEV","_jsxDEV","Question","question","_s","comments","setComments","newComment","setNewComment","handleAddComment","trim","children","text","fileName","_jsxFileName","lineNumber","columnNumber","upvotes","downvotes","type","value","onChange","e","target","placeholder","onClick","map","comment","index","_c","$RefreshReg$"],"sources":["C:/Users/youss/Downloads/Therapedia/Therapedia/src/components/Question.js"],"sourcesContent":["// Question.js\r\nimport React, { useState } from 'react';\r\nimport Comment from './Comment';\r\n\r\nconst Question = ({ question }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n\r\n    const handleAddComment = () => {\r\n        if (!newComment.trim()) return;\r\n        setComments([...comments, newComment]);\r\n        setNewComment('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>{question.text}</h3>\r\n            <div>\r\n                <button>Upvote ({question.upvotes})</button>\r\n                <button>Downvote ({question.downvotes})</button>\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newComment}\r\n                    onChange={(e) => setNewComment(e.target.value)}\r\n                    placeholder=\"Add a comment...\"\r\n                />\r\n                <button onClick={handleAddComment}>Comment</button>\r\n            </div>\r\n            {question.comments.map((comment, index) => (\r\n                <Comment key={index} comment={comment} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,CAAC,EAAE;IACxBJ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEE,UAAU,CAAC,CAAC;IACtCC,aAAa,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,oBACIP,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAKR,QAAQ,CAACS;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBf,OAAA;MAAAU,QAAA,gBACIV,OAAA;QAAAU,QAAA,GAAQ,UAAQ,EAACR,QAAQ,CAACc,OAAO,EAAC,GAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5Cf,OAAA;QAAAU,QAAA,GAAQ,YAAU,EAACR,QAAQ,CAACe,SAAS,EAAC,GAAC;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACNf,OAAA;MAAAU,QAAA,gBACIV,OAAA;QACIkB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEb,UAAW;QAClBc,QAAQ,EAAGC,CAAC,IAAKd,aAAa,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAkB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACFf,OAAA;QAAQwB,OAAO,EAAEhB,gBAAiB;QAAAE,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,EACLb,QAAQ,CAACE,QAAQ,CAACqB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAClC3B,OAAA,CAACF,OAAO;MAAa4B,OAAO,EAAEA;IAAQ,GAAxBC,KAAK;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CAC3C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACZ,EAAA,CA/BIF,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAiCd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}