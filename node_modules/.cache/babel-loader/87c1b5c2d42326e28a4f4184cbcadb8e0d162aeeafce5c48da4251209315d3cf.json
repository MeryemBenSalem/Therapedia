{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youss\\\\Downloads\\\\Therapedia\\\\Therapedia\\\\src\\\\components\\\\Comment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Comment from './Comment';\nimport './Question.css';\nimport AddBoxRoundedIcon from '@mui/icons-material/AddBoxRounded';\nimport { Button } from '@mui/material';\nimport ArrowUpwardRoundedIcon from '@mui/icons-material/ArrowUpwardRounded';\nimport ArrowDownwardRoundedIcon from '@mui/icons-material/ArrowDownwardRounded';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Question = ({\n  question,\n  onVote\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [voted, setVoted] = useState(null);\n  const [newComment, setNewComment] = useState('');\n  const [upvotes, setUpvotes] = useState(question.upvotes);\n  const [downvotes, setDownvotes] = useState(question.downvotes);\n  useEffect(() => {\n    // Fetch comments belonging to the question\n    fetchComments(question.id);\n  }, [question.id]);\n  const fetchComments = async questionId => {\n    try {\n      const response = await fetch(`http://localhost:8080/Comments/question/${questionId}`);\n      if (response.ok) {\n        const data = await response.json();\n        // Sort the comments based on the difference between upvotes and downvotes\n        const sortedComments = data.sort((a, b) => b.upvotes - b.downvotes - (a.upvotes - a.downvotes));\n        setComments(sortedComments);\n      } else {\n        console.error('Failed to fetch comments');\n      }\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  };\n  const handleAddComment = async () => {\n    if (!newComment.trim()) return;\n    try {\n      const response = await fetch('http://localhost:8080/Comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newComment,\n          // Use 'content' instead of 'text'\n          upvotes: 0,\n          // Initialize upvotes to 0\n          downvotes: 0,\n          // Initialize downvotes to 0\n          userId: 1,\n          // Provide the user ID, replace '1' with the actual user ID\n          date: new Date().toISOString(),\n          // Use current date and time\n          question: {\n            id: question.id\n          } // Provide the question ID in the format expected by the server\n        })\n      });\n      if (response.ok) {\n        // Add the new comment to the local state\n        const createdComment = await response.json();\n        setComments(prevComments => [...prevComments, createdComment]);\n        setNewComment('');\n      } else {\n        console.error('Failed to add comment');\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  const handleUpvote = async () => {\n    if (voted === null) {\n      setUpvotes(prevUpvotes => prevUpvotes + 1);\n      setVoted('up');\n      onVote(question.id, 'upvote'); // Call the onVote function with question id and vote type\n    }\n  };\n  const handleDownvote = async () => {\n    if (voted === null) {\n      setDownvotes(prevDownvotes => prevDownvotes + 1);\n      setVoted('down');\n      onVote(question.id, 'downvote'); // Call the onVote function with question id and vote type\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://i9.photobucket.com/albums/a88/creaticode/avatar_1_zps8e1c80cd.jpg\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-head\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"question-name by-author\",\n            children: \"test user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(ArrowDownwardRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 66\n            }, this),\n            onClick: handleDownvote,\n            disabled: voted !== null,\n            children: downvotes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(ArrowUpwardRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 66\n            }, this),\n            onClick: handleUpvote,\n            disabled: voted !== null,\n            children: upvotes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-content\",\n          children: question.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-box1\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newComment,\n            onChange: e => setNewComment(e.target.value),\n            className: \"comment-input\",\n            placeholder: \"Add a comment...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            startIcon: /*#__PURE__*/_jsxDEV(AddBoxRoundedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 44\n            }, this),\n            onClick: handleAddComment,\n            className: \"comment-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-container\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Question, \"rv3Scpr5roeWOvZw8pBktVRxfE4=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useState","useEffect","Comment","AddBoxRoundedIcon","Button","ArrowUpwardRoundedIcon","ArrowDownwardRoundedIcon","jsxDEV","_jsxDEV","Question","question","onVote","_s","comments","setComments","voted","setVoted","newComment","setNewComment","upvotes","setUpvotes","downvotes","setDownvotes","fetchComments","id","questionId","response","fetch","ok","data","json","sortedComments","sort","a","b","console","error","handleAddComment","trim","method","headers","body","JSON","stringify","content","userId","date","Date","toISOString","createdComment","prevComments","handleUpvote","prevUpvotes","handleDownvote","prevDownvotes","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","variant","startIcon","onClick","disabled","type","value","onChange","e","target","placeholder","map","comment","_c","$RefreshReg$"],"sources":["C:/Users/youss/Downloads/Therapedia/Therapedia/src/components/Comment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Comment from './Comment';\r\nimport './Question.css';\r\nimport AddBoxRoundedIcon from '@mui/icons-material/AddBoxRounded';\r\nimport { Button } from '@mui/material';\r\nimport ArrowUpwardRoundedIcon from '@mui/icons-material/ArrowUpwardRounded';\r\nimport ArrowDownwardRoundedIcon from '@mui/icons-material/ArrowDownwardRounded';\r\n\r\nconst Question = ({ question, onVote }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [voted, setVoted] = useState(null);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [upvotes, setUpvotes] = useState(question.upvotes);\r\n    const [downvotes, setDownvotes] = useState(question.downvotes);\r\n\r\n    useEffect(() => {\r\n        // Fetch comments belonging to the question\r\n        fetchComments(question.id);\r\n    }, [question.id]);\r\n\r\n    const fetchComments = async (questionId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/Comments/question/${questionId}`);\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                // Sort the comments based on the difference between upvotes and downvotes\r\n                const sortedComments = data.sort((a, b) => (b.upvotes - b.downvotes) - (a.upvotes - a.downvotes));\r\n                setComments(sortedComments);\r\n            } else {\r\n                console.error('Failed to fetch comments');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching comments:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddComment = async () => {\r\n        if (!newComment.trim()) return;\r\n        try {\r\n            const response = await fetch('http://localhost:8080/Comments', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    content: newComment, // Use 'content' instead of 'text'\r\n                    upvotes: 0, // Initialize upvotes to 0\r\n                    downvotes: 0, // Initialize downvotes to 0\r\n                    userId: 1, // Provide the user ID, replace '1' with the actual user ID\r\n                    date: new Date().toISOString(), // Use current date and time\r\n                    question: { id: question.id } // Provide the question ID in the format expected by the server\r\n                }),\r\n            });\r\n            if (response.ok) {\r\n                // Add the new comment to the local state\r\n                const createdComment = await response.json();\r\n                setComments(prevComments => [...prevComments, createdComment]);\r\n                setNewComment('');\r\n            } else {\r\n                console.error('Failed to add comment');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding comment:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleUpvote = async () => {\r\n        if (voted === null) {\r\n            setUpvotes(prevUpvotes => prevUpvotes + 1);\r\n            setVoted('up');\r\n            onVote(question.id, 'upvote'); // Call the onVote function with question id and vote type\r\n        }\r\n    };\r\n\r\n    const handleDownvote = async () => {\r\n        if (voted === null) {\r\n            setDownvotes(prevDownvotes => prevDownvotes + 1);\r\n            setVoted('down');\r\n            onVote(question.id, 'downvote'); // Call the onVote function with question id and vote type\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"questions-list\">\r\n            <li>\r\n                <div className=\"question-avatar\"><img src=\"http://i9.photobucket.com/albums/a88/creaticode/avatar_1_zps8e1c80cd.jpg\" alt=\"\"/></div>\r\n                <div className=\"question-box\">\r\n                    <div className=\"question-head\">\r\n                        <h6 className=\"question-name by-author\">test user</h6>\r\n                        <Button variant={\"contained\"} startIcon={<ArrowDownwardRoundedIcon/>} onClick={handleDownvote} disabled={voted !== null}>{downvotes}</Button>\r\n                        <Button variant={\"contained\"} startIcon={<ArrowUpwardRoundedIcon/>} onClick={handleUpvote} disabled={voted !== null}>{upvotes}</Button>\r\n                    </div>\r\n                    <div className=\"question-content\">{question.content}</div>\r\n                    <div className=\"comment-box1\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newComment}\r\n                            onChange={(e) => setNewComment(e.target.value)}\r\n                            className=\"comment-input\"\r\n                            placeholder=\"Add a comment...\"\r\n                        />\r\n                        <Button startIcon={<AddBoxRoundedIcon/>} onClick={handleAddComment} className=\"comment-button\"></Button>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n            <div className=\"comment-container\">\r\n                {comments.map((comment) => (\r\n                    <Comment key={comment.id} comment={comment}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}