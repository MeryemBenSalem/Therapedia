{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youss\\\\Downloads\\\\Therapedia\\\\Therapedia\\\\src\\\\components\\\\ForumPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport QuestionForm from './QuestionForm';\nimport './ForumPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForumPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/Question');\n      if (!response.ok) {\n        throw new Error('Failed to fetch questions');\n      }\n      const data = await response.json();\n      // Sort the questions based on the number of upvotes in descending order\n      const sortedQuestions = data.sort((a, b) => b.upvotes - a.upvotes);\n      setQuestions(sortedQuestions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n  const addQuestion = async questionData => {\n    try {\n      // Fetch the current user's ID from your authentication system\n      const currentUserId = getCurrentUserId(); // Replace getCurrentUserId() with the actual function to get the user ID\n\n      const response = await fetch('http://localhost:8080/Question', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...questionData,\n          date: new Date().toISOString(),\n          // Add the current date\n          user_Id: currentUserId // Provide the actual user ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add question');\n      }\n      fetchQuestions(); // Refresh the list of questions after adding a new one\n    } catch (error) {\n      console.error('Error adding question:', error);\n    }\n  };\n  const voteQuestion = async (questionId, voteType) => {\n    try {\n      const response = await fetch(`http://localhost:8080/Question/${questionId}/${voteType}`, {\n        method: 'PUT' // or PATCH\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to ${voteType} question`);\n      }\n      fetchQuestions(); // Refresh the list of questions after voting\n    } catch (error) {\n      console.error(`Error ${voteType}ing question:`, error);\n    }\n  };\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to our Forum page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openModal,\n      children: \"Add Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      onClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: toggleModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(QuestionForm, {\n          onAddQuestion: addQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-list\",\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        onVote: voteQuestion\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(ForumPage, \"4G6KtlHMgmzL27/CLyWyIxLyyZc=\");\n_c = ForumPage;\nexport default ForumPage;\nvar _c;\n$RefreshReg$(_c, \"ForumPage\");","map":{"version":3,"names":["React","useState","useEffect","Question","QuestionForm","jsxDEV","_jsxDEV","ForumPage","_s","questions","setQuestions","isModalOpen","setIsModalOpen","fetchQuestions","response","fetch","ok","Error","data","json","sortedQuestions","sort","a","b","upvotes","error","console","addQuestion","questionData","currentUserId","getCurrentUserId","method","headers","body","JSON","stringify","date","Date","toISOString","user_Id","voteQuestion","questionId","voteType","openModal","toggleModal","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","e","stopPropagation","onAddQuestion","map","question","index","onVote","_c","$RefreshReg$"],"sources":["C:/Users/youss/Downloads/Therapedia/Therapedia/src/components/ForumPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Question from './Question';\r\nimport QuestionForm from './QuestionForm';\r\nimport './ForumPage.css';\r\n\r\nconst ForumPage = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    const fetchQuestions = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/Question');\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch questions');\r\n            }\r\n            const data = await response.json();\r\n            // Sort the questions based on the number of upvotes in descending order\r\n            const sortedQuestions = data.sort((a, b) => b.upvotes - a.upvotes);\r\n            setQuestions(sortedQuestions);\r\n        } catch (error) {\r\n            console.error('Error fetching questions:', error);\r\n        }\r\n    };\r\n\r\n    const addQuestion = async (questionData) => {\r\n        try {\r\n            // Fetch the current user's ID from your authentication system\r\n            const currentUserId = getCurrentUserId(); // Replace getCurrentUserId() with the actual function to get the user ID\r\n\r\n            const response = await fetch('http://localhost:8080/Question', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    ...questionData,\r\n                    date: new Date().toISOString(), // Add the current date\r\n                    user_Id: currentUserId, // Provide the actual user ID\r\n                }),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add question');\r\n            }\r\n            fetchQuestions(); // Refresh the list of questions after adding a new one\r\n        } catch (error) {\r\n            console.error('Error adding question:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const voteQuestion = async (questionId, voteType) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/Question/${questionId}/${voteType}`, {\r\n                method: 'PUT', // or PATCH\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to ${voteType} question`);\r\n            }\r\n            fetchQuestions(); // Refresh the list of questions after voting\r\n        } catch (error) {\r\n            console.error(`Error ${voteType}ing question:`, error);\r\n        }\r\n    };\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Welcome to our Forum page</h1>\r\n            <button onClick={openModal}>Add Question</button>\r\n            {isModalOpen && (\r\n                <div className=\"modal-overlay\" onClick={toggleModal}>\r\n                    <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                        <span className=\"close\" onClick={toggleModal}>&times;</span>\r\n                        <QuestionForm onAddQuestion={addQuestion} />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div className=\"question-list\">\r\n                {questions.map((question, index) => (\r\n                    <Question key={index} question={question} onVote={voteQuestion} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForumPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}