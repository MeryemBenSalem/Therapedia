{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\youss\\\\Downloads\\\\Therapedia\\\\Therapedia\\\\src\\\\components\\\\ForumPage.js\",\n  _s = $RefreshSig$();\n// ForumPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport QuestionForm from './QuestionForm';\nimport './ForumPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForumPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/Question');\n      if (!response.ok) {\n        throw new Error('Failed to fetch questions');\n      }\n      const data = await response.json();\n      // Sort the questions based on the number of votes in descending order\n      const sortedQuestions = data.sort((a, b) => b.votes - a.votes);\n      setQuestions(sortedQuestions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n  const addQuestion = async questionData => {\n    try {\n      const response = await fetch('http://localhost:8080/Question', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...questionData,\n          date: new Date().toISOString(),\n          userId: 2\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add question');\n      }\n      fetchQuestions();\n    } catch (error) {\n      console.error('Error adding question:', error);\n    }\n  };\n  const voteQuestion = async (questionId, voteType) => {\n    try {\n      const response = await fetch(`http://localhost:8080/Question/${questionId}/${voteType}`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to ${voteType} question`);\n      }\n    } catch (error) {\n      console.error(`Error ${voteType}ing question:`, error);\n    }\n  };\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to our Forum page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-question\",\n        onClick: openModal,\n        children: \"Share your thoughts!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"for-not\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forum\",\n        children: [isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-overlay\",\n          onClick: toggleModal,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-content\",\n            onClick: e => e.stopPropagation(),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: toggleModal,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(QuestionForm, {\n              onAddQuestion: addQuestion\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-list\",\n          children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n            question: question,\n            onVote: voteQuestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(ForumPage, \"4G6KtlHMgmzL27/CLyWyIxLyyZc=\");\n_c = ForumPage;\nexport default ForumPage;\nvar _c;\n$RefreshReg$(_c, \"ForumPage\");","map":{"version":3,"names":["React","useState","useEffect","Question","QuestionForm","jsxDEV","_jsxDEV","ForumPage","_s","questions","setQuestions","isModalOpen","setIsModalOpen","fetchQuestions","response","fetch","ok","Error","data","json","sortedQuestions","sort","a","b","votes","error","console","addQuestion","questionData","method","headers","body","JSON","stringify","date","Date","toISOString","userId","voteQuestion","questionId","voteType","openModal","toggleModal","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","e","stopPropagation","onAddQuestion","map","question","index","onVote","_c","$RefreshReg$"],"sources":["C:/Users/youss/Downloads/Therapedia/Therapedia/src/components/ForumPage.js"],"sourcesContent":["// ForumPage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Question from './Question';\r\nimport QuestionForm from './QuestionForm';\r\nimport './ForumPage.css';\r\n\r\nconst ForumPage = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    const fetchQuestions = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/Question');\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch questions');\r\n            }\r\n            const data = await response.json();\r\n            // Sort the questions based on the number of votes in descending order\r\n            const sortedQuestions = data.sort((a, b) => b.votes - a.votes);\r\n            setQuestions(sortedQuestions);\r\n        } catch (error) {\r\n            console.error('Error fetching questions:', error);\r\n        }\r\n    };\r\n\r\n    const addQuestion = async (questionData) => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/Question', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    ...questionData,\r\n                    date: new Date().toISOString(),\r\n                    userId: 2,\r\n                }),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Failed to add question');\r\n            }\r\n            fetchQuestions();\r\n        } catch (error) {\r\n            console.error('Error adding question:', error);\r\n        }\r\n    };\r\n\r\n    const voteQuestion = async (questionId, voteType) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/Question/${questionId}/${voteType}`, {\r\n                method: 'PUT',\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to ${voteType} question`);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error ${voteType}ing question:`, error);\r\n        }\r\n    };\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const toggleModal = () => {\r\n        setIsModalOpen(!isModalOpen);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <div className=\"header\">\r\n                <h1>Welcome to our Forum page</h1>\r\n                <button className=\"add-question\" onClick={openModal}>Share your thoughts!</button>\r\n            </div>\r\n            <div className=\"for-not\">\r\n            <div className=\"forum\">\r\n                {isModalOpen && (\r\n                    <div className=\"modal-overlay\" onClick={toggleModal}>\r\n                        <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                            <span className=\"close\" onClick={toggleModal}>&times;</span>\r\n                            <QuestionForm onAddQuestion={addQuestion}/>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"question-list\">\r\n                    {questions.map((question, index) => (\r\n                        <Question key={index} question={question} onVote={voteQuestion}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"notifications\">\r\n                <h2>Notifications</h2>\r\n\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default ForumPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}